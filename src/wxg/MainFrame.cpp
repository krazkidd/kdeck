// -*- C++ -*-
//
// generated by wxGlade 1.1.0b1 on Fri Aug  9 15:39:27 2024
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include <wx/wx.h>
#include "MainFrame.hpp"

// begin wxGlade: ::extracode
// end wxGlade


MainFrame::MainFrame(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: MainFrame::MainFrame
    SetSize(wxSize(873, 300));
    SetTitle(_("frame"));
    frame_menubar = new wxMenuBar();
    wxMenu *wxglade_tmp_menu;
    wxglade_tmp_menu = new wxMenu();
    mnuLogin = wxglade_tmp_menu->Append(kdeck::ID_Login, _("Login..."), _("Login"));
    Bind(wxEVT_MENU, &MainFrame::OnMenuItemSelected, this, kdeck::ID_Login);
    mnuLogout = wxglade_tmp_menu->Append(kdeck::ID_Logout, _("Logout..."), _("Logout"));
    Bind(wxEVT_MENU, &MainFrame::OnMenuItemSelected, this, kdeck::ID_Logout);
    wxglade_tmp_menu->AppendSeparator();
    wxglade_tmp_menu->Append(wxID_EXIT, _("~Quit~"), wxEmptyString);
    frame_menubar->Append(wxglade_tmp_menu, _("&File"));
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(kdeck::ID_Exchange_Announcements, _("Announcements"), _("Announcements"));
    Bind(wxEVT_MENU, &MainFrame::OnMenuItemSelected, this, kdeck::ID_Exchange_Announcements);
    wxglade_tmp_menu->Append(kdeck::ID_Exchange_Schedule, _("Schedule"), _("Schedule"));
    Bind(wxEVT_MENU, &MainFrame::OnMenuItemSelected, this, kdeck::ID_Exchange_Schedule);
    wxglade_tmp_menu->Append(kdeck::ID_Exchange_Status, _("Status"), _("Status"));
    Bind(wxEVT_MENU, &MainFrame::OnMenuItemSelected, this, kdeck::ID_Exchange_Status);
    frame_menubar->Append(wxglade_tmp_menu, _("&Exchange"));
    wxglade_tmp_menu = new wxMenu();
    mnuShowClosedPositions = wxglade_tmp_menu->Append(kdeck::ID_View_ShowClosedPositions, _("Show Closed Positions"), _("Show Closed Positions"));
    Bind(wxEVT_MENU, &MainFrame::OnMenuItemSelected, this, kdeck::ID_View_ShowClosedPositions);
    frame_menubar->Append(wxglade_tmp_menu, _("&View"));
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(wxID_ABOUT, _("~About~"), wxEmptyString);
    frame_menubar->Append(wxglade_tmp_menu, _("&Help"));
    SetMenuBar(frame_menubar);
    frame_statusbar = CreateStatusBar(2);
    int frame_statusbar_widths[] = { -1, -1 };
    frame_statusbar->SetStatusWidths(2, frame_statusbar_widths);
    
    // statusbar fields
    const wxString frame_statusbar_fields[] = {
        _("Message"),
        _("Status"),
    };
    for(int i = 0; i < frame_statusbar->GetFieldsCount(); ++i) {
        frame_statusbar->SetStatusText(frame_statusbar_fields[i], i);
    }
    panel_1 = new wxPanel(this, wxID_ANY);
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
    sizer_1->Add(sizer_2, 0, wxEXPAND, 0);
    sizer_2->Add(20, 20, 1, wxEXPAND, 0);
    wxStaticText* label_1 = new wxStaticText(panel_1, wxID_ANY, _("Balance:"));
    sizer_2->Add(label_1, 0, wxALL, 5);
    text_ctrl_1 = new wxTextCtrl(panel_1, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxBORDER_NONE|wxTE_READONLY);
    sizer_2->Add(text_ctrl_1, 0, wxALL, 4);
    wxFlexGridSizer* grid_sizer_1 = new wxFlexGridSizer(0, 6, 0, 0);
    sizer_1->Add(grid_sizer_1, 0, wxEXPAND, 0);
    wxStaticText* label_2 = new wxStaticText(panel_1, wxID_ANY, _("Ticker"));
    grid_sizer_1->Add(label_2, 0, wxALL, 5);
    wxStaticText* label_3 = new wxStaticText(panel_1, wxID_ANY, _("Position"));
    grid_sizer_1->Add(label_3, 0, wxALL, 5);
    wxStaticText* label_4 = new wxStaticText(panel_1, wxID_ANY, _("Exposure"));
    grid_sizer_1->Add(label_4, 0, wxALL, 5);
    wxStaticText* label_5 = new wxStaticText(panel_1, wxID_ANY, _("Realized P/L"));
    grid_sizer_1->Add(label_5, 0, wxALL, 5);
    wxStaticText* label_6 = new wxStaticText(panel_1, wxID_ANY, _("Total Traded"));
    grid_sizer_1->Add(label_6, 0, wxALL, 5);
    wxStaticText* label_7 = new wxStaticText(panel_1, wxID_ANY, _("Resting Orders"));
    grid_sizer_1->Add(label_7, 0, wxALL, 5);
    
    grid_sizer_1->AddGrowableCol(0);
    panel_1->SetSizer(sizer_1);
    Layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(MainFrame, wxFrame)
    // begin wxGlade: MainFrame::event_table
    // end wxGlade
END_EVENT_TABLE();


void MainFrame::OnMenuItemSelected(wxCommandEvent &event)  // wxGlade: MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MainFrame::OnMenuItemSelected) not implemented yet"));
}

void MainFrame::---(wxCommandEvent &event)  // wxGlade: MainFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MainFrame::---) not implemented yet"));
}


// wxGlade: add MainFrame event handlers

